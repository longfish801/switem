#! clmap:tagdsl
#-dec
	import io.github.longfish801.tpac.tea.TeaHandle
#> map:switem
#: switem全般にかかわる処理です。
#>> map:output
#: 出力処理です。
#: テキストハンドルを文字列に加工します。
#: 下位のハンドルを再帰的に呼びます。
#: 引数として、出力用のWriterと、出力対象のテキストハンドルを渡します。
#-args
	Writer writer
	TeaHandle hndl
#> map:parse
#>> map:outRange
#: すべてのparse操作ハンドルでも解析対象外となった行の扱いを決めます。
#: 引数として、上位のカバーハンドル、解析対象外となった行のリスト、チャンクハンドルの通し番号を渡します。
#: 作成したチャンクハンドルの個数分だけ加算した通し番号を返します。
#-dec
	import io.github.longfish801.tpac.TpacHandle
#-args
	TeaHandle coverHandle
	List lines
	int chunkNum
#-return
	chunkNum
#> map:parseOperator
#-dec
	import io.github.longfish801.switem.ParseOperator
#>> map:exist
#: parse操作ハンドルの存在確認に使用します。
#: ハンドルのタグ名を、値の無いキーとして指定してください。
#>> map:conds
#: キーに指定する値の検査に必要な条件を定義します。
#: 指定の仕方はio.github.longfish801.tpac.tea.TeaHandle#validateKeys(Map)のgroovydocを参照してください。
#>> map:visit
#: 必要に応じて初期化します。
#: io.github.longfish801.tpac.tea.TeaHandle#visitに相当する処理です。
#: 引数として操作ハンドルのインスタンスを渡します。
#-args
	ParseOperator operator
#>> map:detectRange
#: 解析対象とする範囲を検出します。
#: 引数として操作ハンドルのインスタンス、解析対象行のリスト、解析位置を渡します。
#: 戻り値として lines[lineIdx]が解析対象の開始でなければ0を返してください。
#: 解析対象の開始行であれば、終了行までの行数を返してください。
#-args
	ParseOperator operator
	List lines
	int lineIdx
#-return
	int size
#-prefix
	size = 0
#>> map:createCoverHandle
#: カバーハンドルを作成します。
#: カバーハンドルのインスタンスは作成済であり、引数として渡します。
#: カバーハンドルにキーを設定したり、
#: ParseOperator#parseRecursiveを読んで再帰的に下位の解析をしたりします。
#: 引数として操作ハンドルのインスタンス、カバーハンドル、行リストを渡します。
#-args
	ParseOperator operator
	TeaHandle coverHandle
	List lines
#> map:formatOperator
#-dec
	import io.github.longfish801.switem.FormatOperator
#>> map:exist
#: format操作ハンドルの存在確認に使用します。
#: ハンドルのタグ名を、値の無いキーとして指定してください。
#>> map:conds
#: キーに指定する値の検査に必要な条件を定義します。
#: 指定の仕方はio.github.longfish801.tpac.tea.TeaHandle#validateKeys(Map)のgroovydocを参照してください。
#>> map:visit
#: 必要に応じて初期化します。
#: io.github.longfish801.tpac.tea.TeaHandle#visitに相当する処理です。
#: 引数として操作ハンドルのインスタンスを渡します。
#-args
	FormatOperator operator
#>> map:formatCoverHandle
#: カバーハンドルを整形します。
#: 引数として操作ハンドルのインスタンスを渡します。
#-args
	FormatOperator operator
	TeaHandle coverHandle
#>> map:formatChunkHandle
#: チャンクハンドルを整形します。
#: 引数として操作ハンドルのインスタンスを渡します。
#-args
	FormatOperator operator
	TeaHandle chunkHandle
#!
