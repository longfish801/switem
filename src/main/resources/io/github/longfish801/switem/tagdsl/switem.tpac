#! clmap:tagdsl
#> map:switem
#>> map:output
#>>> closure
	Closure getLines
	getLines = { def handle ->
		// チャンクハンドルならばテキストを返します
		if (handle.tag == 'chunk') return handle.dflt
		// カバーハンドルなら下位ハンドルを再帰的に呼びます
		Closure getVal = { String value -> return (value != null)? value : '' }
		List lines = []
		if (handle.top != null) lines += (handle.top instanceof List)? handle.top : [ handle.top ]
		handle.lowers.values().eachWithIndex { def lowerHandle, int hndlIdx ->
			List lowerLines = getLines.call(lowerHandle)
			lowerLines.eachWithIndex { String line, int lineIdx ->
				String bullet = (hndlIdx == 0 && lineIdx == 0)? getVal.call(handle.bullet) : getVal.call(handle.more)
				String bgn = (hndlIdx == 0 && lineIdx == 0)? getVal.call(handle.bgn) : ''
				String end = (hndlIdx == handle.lowers.size() - 1 && lineIdx == lowerLines.size() - 1)? getVal.call(handle.end) : ''
				lines << "${bullet}${bgn}${line}${end}"
			}
			boolean nogap = (lowerHandle.nogap != null && lowerHandle.nogap == true)? true : false
			if (nogap == false && handle.gap != null && hndlIdx < handle.lowers.size() - 1) lines << handle.gap
		}
		if (handle.btm != null) lines += (handle.btm instanceof List)? handle.btm : [ handle.btm ]
		return lines
	}
	getLines.call(hndl).each { String line -> writer << "${line}${System.lineSeparator()}" }
#!
